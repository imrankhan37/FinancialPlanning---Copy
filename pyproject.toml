[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "financial-planning"
version = "1.0.0"
description = "Template-driven financial planning and scenario analysis tool"
authors = [{name = "Financial Planning Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "plotly>=5.15.0",
    "openpyxl>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

[project.urls]
Homepage = "https://github.com/your-org/financial-planning"
Repository = "https://github.com/your-org/financial-planning.git"
Issues = "https://github.com/your-org/financial-planning/issues"

# Ruff Configuration
[tool.ruff]
target-version = "py39"
line-length = 88
indent-width = 4

# Enable specific rule categories
[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "RET",    # flake8-return
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (remove commented code)
    "PD",     # pandas-vet
    "PL",     # pylint
    "TRY",    # tryceratops
    "NPY",    # numpy specific
    "PERF",   # performance anti-patterns
    "RUF",    # ruff-specific rules
]

ignore = [
    "E501",     # line too long (handled by formatter)
    "PLR0913",  # too many arguments in function definition
    "PLR0912",  # too many branches
    "PLR0915",  # too many statements
    "TRY003",   # avoid specifying long messages outside exception class
    "T201",     # print statements (useful for debugging)
    "T203",     # pprint statements
    "ERA001",   # commented code (sometimes useful for context)
    "PD901",    # avoid using generic names for pandas DataFrame
    "B008",     # function calls in argument defaults
]

# Ignore specific patterns in specific files
[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "ARG",      # unused function arguments in tests
    "PLR2004",  # magic value comparison in tests
    "S101",     # use of assert in tests
]
"**/test*.py" = [
    "ARG", "PLR2004", "S101"
]
"streamlit_app.py" = [
    "T201",     # print statements are fine in main app
]
"analyze_*.py" = [
    "T201",     # print statements are expected in analysis scripts
]
"show_*.py" = [
    "T201",     # print statements are expected in display scripts
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["config", "models", "utils", "components"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = [
    "tests",
    ".",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/.env/*",
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
